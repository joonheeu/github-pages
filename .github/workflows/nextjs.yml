# Sample workflow for building and deploying a Next.js site to GitHub Pages
# To get started with Next.js see: https://nextjs.org/docs/getting-started
# Next.js 사이트를 GitHub Pages에 빌드 및 배포하기 위한 샘플 워크플로우
# Next.js 시작하기: https://nextjs.org/docs/getting-started

name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  # 기본 브랜치로 푸시될 때 실행
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  # Actions 탭에서 이 워크플로우를 수동으로 실행할 수 있게 함
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# GITHUB_TOKEN의 권한을 설정하여 GitHub Pages로의 배포를 허용
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# 동시에 하나의 배포만 허용, 진행 중인 실행과 최신 대기열 사이에 대기 중인 실행은 건너뜀.
# 그러나 진행 중인 실행을 취소하지 마십시오. 우리는 이러한 프로덕션 배포가 완료되기를 원합니다.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  # Build job
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        # 패키지 관리자 감지
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        # Node 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        # Pages 설정
        uses: actions/configure-pages@v4
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # 자동으로 Next.js 구성 파일에 basePath를 삽입하고 서버 측 이미지 최적화를 비활성화합니다 (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # 설정을 직접 관리하려면 이 줄을 제거하세요.
          static_site_generator: next
      - name: Restore cache
        # 캐시 복원
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # 패키지 또는 소스 파일이 변경될 때마다 새로운 캐시를 생성합니다.
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # 소스 파일이 변경되었지만 패키지는 변경되지 않은 경우 이전 캐시에서 다시 빌드합니다.
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        # 의존성 설치
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        # Next.js로 빌드
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Upload artifact
        # 아티팩트 업로드
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./out

  # Deployment job
  # 배포 작업
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        # GitHub Pages에 배포
        id: deployment
        uses: actions/deploy-pages@v3
